pragma circom 2.1.4;

include "chkhash.circom";
include "turn.circom";
include "rounds.circom";

template Game() {
    //hash of all the moves, randomness, and monster choices (the ids are hashed)
    //game hash is hashed as follows H(mon1,mon2,m1,m2,swap1,r1,r2,...mn-1,mn,swapn,rn-1,rn)
    signal input gameHash;
    //this is the game state in order of player -> npc -> player -> and so forth
    signal input state[26][10];
    //the moves for each turn, makes a transition to the next state
    signal input moves[25][6];
    //the shared randomness (we assume the randomness has already been clipped)
    signal input randomness[25];
    //the attack and defense effectiveness of each move
    //this is kind of a stupid hack
    //but I'm sure there's a more clever way to incorporate
    //the model more succinctly into the game rules
    signal input atkeff[25];
    signal input defeff[25];
    
    //included to prevent man-in-middle-attacks?
    signal input sessionID;

    signal output out;

    assert(sessionID != 0);

    component checkHash = CheckHash(25);
    checkHash.state <== state;
    checkHash.randomness <== randomness;
    checkHash.moves <== moves;
    checkHash.atkeff <== atkeff;
    checkHash.defeff <== defeff;

    gameHash === checkHash.hash;

    component checkRounds = Rounds();
    checkRounds.state <== state;
    checkRounds.moves <== moves;
    checkRounds.randomness <== randomness;
    checkRounds.atkeff <== atkeff;
    checkRounds.defeff <== defeff;

    //we output the health of the NPC as proof of win or loss
    out <== checkRounds.out;
}

component main { public [ gameHash, sessionID ] } = Game();

/* 
INPUT = {
  "sessionID": "0241008287272164729465721528295504357972",
  "state": [
    [
      3,
      100,
      10,
      5,
      3,
      4,
      100,
      10,
      5,
      4
    ],
    [
      3,
      100,
      10,
      5,
      3,
      4,
      100,
      10,
      5,
      4
    ],
    [
      3,
      100,
      10,
      5,
      3,
      4,
      100,
      10,
      5,
      4
    ],
    [
      3,
      100,
      10,
      5,
      3,
      4,
      100,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      100,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      95,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      95,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      90,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      90,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      90,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      90,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      85,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      85,
      10,
      5,
      4
    ],
    [
      3,
      65,
      10,
      5,
      3,
      4,
      80,
      10,
      5,
      4
    ],
    [
      3,
      30,
      10,
      5,
      3,
      4,
      80,
      10,
      5,
      4
    ],
    [
      3,
      30,
      10,
      5,
      3,
      4,
      75,
      10,
      5,
      4
    ],
    [
      3,
      30,
      10,
      5,
      3,
      4,
      75,
      10,
      5,
      4
    ],
    [
      3,
      30,
      10,
      5,
      3,
      4,
      70,
      10,
      5,
      4
    ],
    [
      3,
      0,
      10,
      5,
      3,
      4,
      70,
      10,
      5,
      4
    ],
    [
      3,
      0,
      10,
      5,
      3,
      4,
      70,
      10,
      5,
      4
    ],
    [
      3,
      0,
      10,
      5,
      3,
      4,
      70,
      10,
      5,
      4
    ],
    [
      3,
      0,
      10,
      5,
      3,
      4,
      70,
      10,
      5,
      4
    ],
    [
      3,
      0,
      10,
      5,
      3,
      4,
      70,
      10,
      5,
      4
    ],
    [
      3,
      0,
      10,
      5,
      3,
      4,
      70,
      10,
      5,
      4
    ],
    [
      3,
      0,
      10,
      5,
      3,
      4,
      70,
      10,
      5,
      4
    ],
    3,
    0,
    10,
    5,
    3,
    4,
    70,
    10,
    5,
    4
  ],
  "randomness": [
    2,
    58,
    3,
    92,
    38,
    56,
    85,
    49,
    4,
    51,
    14,
    60,
    93,
    64,
    32,
    12,
    19,
    66,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  "moves": [
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      7,
      10,
      98,
      10,
      3,
      2
    ],
    [
      10,
      20,
      98,
      60,
      4,
      2
    ],
    [
      6,
      0,
      0,
      0,
      0,
      6
    ],
    [
      6,
      0,
      0,
      0,
      0,
      6
    ],
    [
      6,
      0,
      0,
      0,
      0,
      6
    ],
    [
      6,
      0,
      0,
      0,
      0,
      6
    ],
    [
      6,
      0,
      0,
      0,
      0,
      6
    ],
    [
      6,
      0,
      0,
      0,
      0,
      6
    ],
    [
      6,
      0,
      0,
      0,
      0,
      6
    ]
  ],
  "atkeff": [
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  ],
  "defeff": [
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  ]
}
*/